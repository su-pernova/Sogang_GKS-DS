# -*- coding: utf-8 -*-
"""linear_algebra_4_vector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-zz667pAfEGhnS5S4YtKEwlRMfEMmkeF

#Ch.10 working with data

depends on ***Linear Algebra***.

Linear algebras is for Vector calculation and manipulation.

Data are represented in vectors.
"""

# students = [exam1, exam2, exam3, exam4]
grades1 = [90.5, 80.2, 75, 62]
grades2 = [92, 80, 69.4, 68]
grades3 = [85, 81, 70, 72]

print('g1:', grades1)
print('g2:', grades2)
print('g3:', grades3)

"""##**Add**"""

Vector = list
def add(v:Vector, w:Vector) -> Vector:
  assert len(v) == len(w), "vectors must be the same length"
  return [v_i + w_i for v_i,w_i in zip(v,w)]

print(add([1,2],[2,1]))
print(add(grades1, grades2))

def add(v,w):
  assert len(v) == len(w)
  return [v_i + w_i for v_i,w_i in zip(v,w)]

print(add([1,2],[2,1]))
print(add(grades1, grades2))

"""##**Subtract**"""

def subtract(v:Vector, w:Vector) -> Vector:
  assert len(v) == len(w)
  return [v_i - w_i for v_i,w_i in zip(v,w)]

print(subtract([1,2],[2,1]))
print(subtract([5,7,9],[4,5,6]))
print(subtract(grades1, grades2))

def subtract(v,w) :
  assert len(v) == len(w)
  return [v_i - w_i for v_i,w_i in zip(v,w)]

print(subtract([1,2],[2,1]))
print(subtract([5,7,9],[4,5,6]))
print(subtract(grades1, grades2))

"""##**Sum**"""

#componentwise sum of vectors
#def vector_sum(cectors:[Vector]) -> Vector : # type annotation
def vector_sum(vectors): #No type annotation
  assert vectors, "no vectors provided"
  num_elements = len(vectors[0])
  assert all(len(v)==num_elements for v in vectors), 'different sizes'
  return [sum(vector[i] for vector in vectors) for i in range(num_elements)]

#assert : 뒤에 나오는 것이 True인 경우
assert vector_sum([[1,2], [3,4], [7,8]]) == [11,14]
print('sum of g1, g2 =', vector_sum([grades1, grades2]))
print('sum of g1, g2, g3 =', vector_sum([grades1, grades2, grades3]))

"""##**Multiply by a Scalar**"""

#def scalar_multiply(c:float, v:Vector) -> Vector:
#c가 스칼라곱의 곱수가 된다.
def scalar_multiply(c,v): #No type annotation
  return [c*v_i for v_i in v]

assert scalar_multiply(0.5, [1,2]) == [0.5, 1.0], "Never see this"

print(scalar_multiply(2,[1,2]))
print(scalar_multiply(2,grades1))

#두 벡터의 평균값(mean) 구하기
def vector_mean(vectors: [Vector]) -> Vector:
  #def vector_mean(vectors):
  n = len(vectors)
  return scalar_multiply(1/n, vector_sum(vectors))

print(vector_mean([grades1, grades2]))
print(vector_mean([grades2, grades3]))

"""##**Dot Product**

The dot product of two vectors is the sum of their componentwise multiplication.

Formally : v1 ・ w1 + v2 ・ w2 + ... + vn ・ wn
"""

#def dot(v:Vector, w:Vector) -> float:
def dot(v,w):
  assert len(v) == len(w), "vectors must be the same length"
  return sum(v_i*w_i for v_i, w_i in zip(v,w))

print('dot p', dot([1,2,3], [4,5,6])) #(1*4) + (2*5) + (3*6)
print('dot p', dot([1,2,3], [1,2,3])) #(1*1) + (2*2) + (3*3)
print('dot p', dot([1,2], [1,1.5]) ) #(1*1) + (2*1.5)

"""##**Distance**

The distance between two vectors, v and w.


>**Process**

1. subtract(v,w)
2. sum of squares of subtract
3. square root of sum of squares: squared_distance
"""

def sum_of_squares(v:Vector) -> float:
  return dot(v,v) #한 벡터의 제곱된 값을 return

def squared_distance(v,w):
  return sum_of_squares(subtract(v,w))

import math
def distance(v:Vector, w:Vector) -> float:
  return math.sqrt(squared_distance(v,w))

print('subtract', subtract([1,2,3], [4,5,6]))
print('squared distance', squared_distance([1,2,3], [4,5,6]))
print('sqrt of squared d', distance([1,2,3], [4,5,6]))

"""##**Quizzes**"""

eojin = [92, 80, 69.4, 68]
minki = [90.5, 80.2, 75, 62]
sumi = [85, 81, 70, 72]

print('means of exams',vector_mean([eojin, minki, sumi]))
print('***e : eojin, m : minki, s : sumi***')
print('how different btw e & m', distance(eojin, minki))
print('how different btw e & s', distance(eojin, sumi))
print('how different btw m & s', distance(minki, sumi))